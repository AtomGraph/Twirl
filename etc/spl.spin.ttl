# baseURI: http://spinrdf.org/spl
# imports: http://spinrdf.org/spin
# prefix: spl

@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

arg:class
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:instance
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:max
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:maxCount
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:maxLength
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:min
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:minCount
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:minLength
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:otherProperty
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:pattern
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:property
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:type
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:uriStart
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
<http://spinrdf.org/spl>
  a spin:LibraryOntology ;
  a owl:Ontology ;
  rdfs:comment "A collection of generally useful SPARQL functions (expressed as SPIN functions), and SPIN templates. Also provides a top-level classification of functions, and definitions of the standard SPARQL functions." ;
  rdfs:label "SPIN Standard Library" ;
  owl:imports <http://spinrdf.org/spin> ;
  owl:versionInfo "1.4.2" ;
.
spl:Argument
  a spin:ConstructTemplate ;
  spin:text """PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX  rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

CONSTRUCT {
    _:b0 a spin:ConstraintViolation .
    _:b0 spin:violationRoot ?this .
    _:b0 spin:violationPath ?predicate .
}
WHERE
  {   { SELECT  (count(*) AS ?cardinality)
        WHERE
          { ?this  ?predicate  ?object
            FILTER bound(?minCount)
          }
        HAVING ( ?cardinality < ?minCount )
      }
    UNION
      { { SELECT  (count(*) AS ?cardinality)
          WHERE
            { ?this  ?predicate  ?object
              FILTER bound(?maxCount)
            }
          HAVING ( ?cardinality > ?maxCount )
        }
      }
    UNION
      { ?this  ?predicate  ?object
        FILTER ( isURI(?object) || isBlank(?object) )
        FILTER bound(?valueType)
        FILTER NOT EXISTS { ?object  rdf:type  ?class .
                            ?class (rdfs:subClassOf)* ?valueType
                          }
      }
    UNION
      { ?this  ?predicate  ?object
        FILTER isLiteral(?object)
        FILTER bound(?valueType)
        BIND(datatype(?object) AS ?datatype)
        FILTER ( ! ( ( ?datatype IN (?valueType, rdfs:Literal) ) || ( ( ( ! bound(?datatype) ) || ( ?datatype = rdf:langString ) ) && ( ?valueType = xsd:string ) ) ) )
      }
  }""" ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate spl:defaultValue ;
      rdfs:comment "the default value for the argument" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate spl:optional ;
      spl:valueType xsd:boolean ;
      rdfs:comment "indicates whether the argument is optional" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate spl:valueType ;
      spl:valueType rdfs:Class ;
      rdfs:comment "the value type of the argument" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate rdfs:comment ;
      spl:valueType xsd:string ;
      rdfs:comment "a comment describing the argument" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate spl:predicate ;
      spl:valueType rdf:Property ;
      rdfs:comment "the property holding the values of each function call" ;
    ] ;
  spin:labelTemplate "Argument {?predicate} : {?valueType}" ;
  rdfs:comment "Provides metadata about an argument of a SPIN Function or Template. Arguments wrap a given rdf:Property (predicate) and specify its value type and whether the argument is optional. When used as spin:constraint, the body of this template will verify that a non-optional value exists and that it has the specified value type. Arguments that have been declared spl:optional true become optional if the type of ?this is spl:UnionTemplate. " ;
  rdfs:label "Argument" ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
spl:valueType
  a rdf:Property ;
  rdfs:label "value type" ;
  rdfs:subPropertyOf sp:arg ;
.
